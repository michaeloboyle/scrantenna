[tool:pytest]
# Pytest configuration for Scrantenna project

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Markers
markers =
    unit: Unit tests for individual functions
    integration: Integration tests for component interactions
    e2e: End-to-end tests for complete workflows
    slow: Tests that take longer to execute
    api: Tests that require external API access
    llm: Tests that require LLM services (Ollama, OpenAI)
    performance: Performance and load tests
    critical: Critical functionality tests

# Output options
addopts = 
    -v
    --tb=short
    --strict-markers
    --cov=shorts
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-fail-under=70

# Test filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:transformers.*

# Minimum version
minversion = 6.0

# Test environment
env =
    TESTING = true
    PYTHONPATH = {toxinidir}/shorts:{toxinidir}/src

# Timeout settings (in seconds)
timeout = 300

# Coverage settings
[coverage:run]
source = shorts, src
omit = 
    */tests/*
    */venv/*
    */__pycache__/*
    */conftest.py
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov
title = Scrantenna Test Coverage Report